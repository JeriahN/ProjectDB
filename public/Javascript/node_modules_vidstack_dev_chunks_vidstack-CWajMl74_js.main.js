/*! For license information please see node_modules_vidstack_dev_chunks_vidstack-CWajMl74_js.main.js.LICENSE.txt */
"use strict";(self.webpackChunkProjectDB=self.webpackChunkProjectDB||[]).push([["node_modules_vidstack_dev_chunks_vidstack-CWajMl74_js"],{"./node_modules/vidstack/dev/chunks/vidstack-BCHQ5iOd.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getCastSession),\n/* harmony export */   b: () => (/* binding */ isCastAvailable),\n/* harmony export */   c: () => (/* binding */ getCastErrorMessage),\n/* harmony export */   d: () => (/* binding */ getDefaultCastOptions),\n/* harmony export */   e: () => (/* binding */ getCastFrameworkURL),\n/* harmony export */   f: () => (/* binding */ getCastSessionMedia),\n/* harmony export */   g: () => (/* binding */ getCastContext),\n/* harmony export */   h: () => (/* binding */ hasLoadedCastFramework),\n/* harmony export */   i: () => (/* binding */ isCastConnected),\n/* harmony export */   j: () => (/* binding */ hasActiveCastSession),\n/* harmony export */   l: () => (/* binding */ listenCastContextEvent)\n/* harmony export */ });\n/* harmony import */ var _vidstack_Bdqy3iGv_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vidstack-Bdqy3iGv.js */ "./node_modules/vidstack/dev/chunks/vidstack-Bdqy3iGv.js");\n\n\nfunction getCastFrameworkURL() {\n  return "https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1";\n}\nfunction hasLoadedCastFramework() {\n  return !!window.cast?.framework;\n}\nfunction isCastAvailable() {\n  return !!window.chrome?.cast?.isAvailable;\n}\nfunction isCastConnected() {\n  return getCastContext().getCastState() === cast.framework.CastState.CONNECTED;\n}\nfunction getCastContext() {\n  return window.cast.framework.CastContext.getInstance();\n}\nfunction getCastSession() {\n  return getCastContext().getCurrentSession();\n}\nfunction getCastSessionMedia() {\n  return getCastSession()?.getSessionObj().media[0];\n}\nfunction hasActiveCastSession(src) {\n  const contentId = getCastSessionMedia()?.media.contentId;\n  return contentId === src?.src;\n}\nfunction getDefaultCastOptions() {\n  return {\n    language: "en-US",\n    autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\n    receiverApplicationId: chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID,\n    resumeSavedSession: true,\n    androidReceiverCompatible: true\n  };\n}\nfunction getCastErrorMessage(code) {\n  const defaultMessage = `Google Cast Error Code: ${code}`;\n  {\n    switch (code) {\n      case chrome.cast.ErrorCode.API_NOT_INITIALIZED:\n        return "The API is not initialized.";\n      case chrome.cast.ErrorCode.CANCEL:\n        return "The operation was canceled by the user";\n      case chrome.cast.ErrorCode.CHANNEL_ERROR:\n        return "A channel to the receiver is not available.";\n      case chrome.cast.ErrorCode.EXTENSION_MISSING:\n        return "The Cast extension is not available.";\n      case chrome.cast.ErrorCode.INVALID_PARAMETER:\n        return "The parameters to the operation were not valid.";\n      case chrome.cast.ErrorCode.RECEIVER_UNAVAILABLE:\n        return "No receiver was compatible with the session request.";\n      case chrome.cast.ErrorCode.SESSION_ERROR:\n        return "A session could not be created, or a session was invalid.";\n      case chrome.cast.ErrorCode.TIMEOUT:\n        return "The operation timed out.";\n      default:\n        return defaultMessage;\n    }\n  }\n}\nfunction listenCastContextEvent(type, handler) {\n  return (0,_vidstack_Bdqy3iGv_js__WEBPACK_IMPORTED_MODULE_0__.l)(getCastContext(), type, handler);\n}\n\n\n\n\n//# sourceURL=webpack://ProjectDB/./node_modules/vidstack/dev/chunks/vidstack-BCHQ5iOd.js?')},"./node_modules/vidstack/dev/chunks/vidstack-CWajMl74.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleCastLoader: () => (/* binding */ GoogleCastLoader)\n/* harmony export */ });\n/* harmony import */ var _vidstack_CFPdVubu_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-CFPdVubu.js */ "./node_modules/vidstack/dev/chunks/vidstack-CFPdVubu.js");\n/* harmony import */ var _vidstack_Chu5mi6j_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vidstack-Chu5mi6j.js */ "./node_modules/vidstack/dev/chunks/vidstack-Chu5mi6j.js");\n/* harmony import */ var _vidstack_BCHQ5iOd_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vidstack-BCHQ5iOd.js */ "./node_modules/vidstack/dev/chunks/vidstack-BCHQ5iOd.js");\n/* harmony import */ var _vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-mrj_B2Yo.js */ "./node_modules/vidstack/dev/chunks/vidstack-mrj_B2Yo.js");\n\n\n\n\n\n\nclass GoogleCastLoader {\n  constructor() {\n    this.name = "google-cast";\n  }\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */\n  get cast() {\n    return (0,_vidstack_BCHQ5iOd_js__WEBPACK_IMPORTED_MODULE_0__.g)();\n  }\n  mediaType() {\n    return "video";\n  }\n  canPlay(src) {\n    return _vidstack_CFPdVubu_js__WEBPACK_IMPORTED_MODULE_1__.I && !_vidstack_CFPdVubu_js__WEBPACK_IMPORTED_MODULE_1__.b && (0,_vidstack_CFPdVubu_js__WEBPACK_IMPORTED_MODULE_1__.d)(src);\n  }\n  async prompt(ctx) {\n    let loadEvent, openEvent, errorEvent;\n    try {\n      loadEvent = await this._loadCastFramework(ctx);\n      if (!this._player) {\n        this._player = new cast.framework.RemotePlayer();\n        new cast.framework.RemotePlayerController(this._player);\n      }\n      openEvent = ctx.player.createEvent("google-cast-prompt-open", {\n        trigger: loadEvent\n      });\n      ctx.player.dispatchEvent(openEvent);\n      this._notifyRemoteStateChange(ctx, "connecting", openEvent);\n      await this._showPrompt((0,_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_2__.p)(ctx.$props.googleCast));\n      ctx.$state.remotePlaybackInfo.set({\n        deviceName: (0,_vidstack_BCHQ5iOd_js__WEBPACK_IMPORTED_MODULE_0__.a)()?.getCastDevice().friendlyName\n      });\n      if ((0,_vidstack_BCHQ5iOd_js__WEBPACK_IMPORTED_MODULE_0__.i)())\n        this._notifyRemoteStateChange(ctx, "connected", openEvent);\n    } catch (code) {\n      const error = code instanceof Error ? code : this._createError(\n        (code + "").toUpperCase(),\n        "Prompt failed."\n      );\n      errorEvent = ctx.player.createEvent("google-cast-prompt-error", {\n        detail: error,\n        trigger: openEvent ?? loadEvent,\n        cancelable: true\n      });\n      ctx.player.dispatch(errorEvent);\n      this._notifyRemoteStateChange(\n        ctx,\n        (0,_vidstack_BCHQ5iOd_js__WEBPACK_IMPORTED_MODULE_0__.i)() ? "connected" : "disconnected",\n        errorEvent\n      );\n      throw error;\n    } finally {\n      ctx.player.dispatch("google-cast-prompt-close", {\n        trigger: errorEvent ?? openEvent ?? loadEvent\n      });\n    }\n  }\n  async load(ctx) {\n    if (!this._player) {\n      throw Error("[vidstack] google cast player was not initialized");\n    }\n    return new (await __webpack_require__.e(/*! import() */ "vendors-node_modules_vidstack_dev_providers_vidstack-google-cast_js").then(__webpack_require__.bind(__webpack_require__, /*! ../providers/vidstack-google-cast.js */ "./node_modules/vidstack/dev/providers/vidstack-google-cast.js"))).GoogleCastProvider(this._player, ctx);\n  }\n  async _loadCastFramework(ctx) {\n    if ((0,_vidstack_BCHQ5iOd_js__WEBPACK_IMPORTED_MODULE_0__.h)())\n      return;\n    const loadStartEvent = ctx.player.createEvent("google-cast-load-start");\n    ctx.player.dispatch(loadStartEvent);\n    await (0,_vidstack_Chu5mi6j_js__WEBPACK_IMPORTED_MODULE_3__.l)((0,_vidstack_BCHQ5iOd_js__WEBPACK_IMPORTED_MODULE_0__.e)());\n    await customElements.whenDefined("google-cast-launcher");\n    const loadedEvent = ctx.player.createEvent("google-cast-loaded", { trigger: loadStartEvent });\n    ctx.player.dispatch(loadedEvent);\n    if (!(0,_vidstack_BCHQ5iOd_js__WEBPACK_IMPORTED_MODULE_0__.b)()) {\n      throw this._createError("CAST_NOT_AVAILABLE", "Google Cast not available on this platform.");\n    }\n    return loadedEvent;\n  }\n  async _showPrompt(options) {\n    this._setOptions(options);\n    const errorCode = await this.cast.requestSession();\n    if (errorCode) {\n      throw this._createError(\n        errorCode.toUpperCase(),\n        (0,_vidstack_BCHQ5iOd_js__WEBPACK_IMPORTED_MODULE_0__.c)(errorCode)\n      );\n    }\n  }\n  _setOptions(options) {\n    this.cast?.setOptions({\n      ...(0,_vidstack_BCHQ5iOd_js__WEBPACK_IMPORTED_MODULE_0__.d)(),\n      ...options\n    });\n  }\n  _notifyRemoteStateChange(ctx, state, trigger) {\n    const detail = { type: "google-cast", state };\n    ctx.delegate._notify("remote-playback-change", detail, trigger);\n  }\n  _createError(code, message) {\n    const error = Error(message);\n    error.code = code;\n    return error;\n  }\n}\n\n\n\n\n//# sourceURL=webpack://ProjectDB/./node_modules/vidstack/dev/chunks/vidstack-CWajMl74.js?')}}]);