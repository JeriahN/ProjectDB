/*! For license information please see vendors-node_modules_vidstack_dev_chunks_vidstack-ChQ0-aqt_js-node_modules_vidstack_dev_provi-84289a.main.js.LICENSE.txt */
"use strict";(self.webpackChunkProjectDB=self.webpackChunkProjectDB||[]).push([["vendors-node_modules_vidstack_dev_chunks_vidstack-ChQ0-aqt_js-node_modules_vidstack_dev_provi-84289a"],{"./node_modules/vidstack/dev/chunks/vidstack-ChQ0-aqt.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   H: () => (/* binding */ HTMLAirPlayAdapter)\n/* harmony export */ });\n/* harmony import */ var _vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vidstack-mrj_B2Yo.js */ "./node_modules/vidstack/dev/chunks/vidstack-mrj_B2Yo.js");\n\n\n\nclass HTMLRemotePlaybackAdapter {\n  constructor(_media, _ctx) {\n    this._media = _media;\n    this._ctx = _ctx;\n    this._supported = (0,_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.f)(false);\n    this._setup();\n  }\n  get supported() {\n    return this._supported();\n  }\n  _setup() {\n    if (!this._media?.remote || !this._canPrompt)\n      return;\n    this._media.remote.watchAvailability((available) => {\n      this._supported.set(available);\n    }).catch(() => {\n      this._supported.set(false);\n    });\n    (0,_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.g)(this._watchSupported.bind(this));\n  }\n  _watchSupported() {\n    if (!this._supported())\n      return;\n    const events = ["connecting", "connect", "disconnect"], onStateChange = this._onStateChange.bind(this);\n    onStateChange();\n    (0,_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.l)(this._media, "playing", onStateChange);\n    for (const type of events) {\n      (0,_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.l)(this._media.remote, type, onStateChange);\n    }\n  }\n  async prompt() {\n    if (!this.supported)\n      throw Error("Not supported on this platform.");\n    if (this._type === "airplay" && this._media.webkitShowPlaybackTargetPicker) {\n      return this._media.webkitShowPlaybackTargetPicker();\n    }\n    return this._media.remote.prompt();\n  }\n  _onStateChange(event) {\n    const state = this._media.remote.state;\n    if (state === this._state)\n      return;\n    const detail = { type: this._type, state };\n    this._ctx.delegate._notify("remote-playback-change", detail, event);\n    this._state = state;\n  }\n}\nclass HTMLAirPlayAdapter extends HTMLRemotePlaybackAdapter {\n  constructor() {\n    super(...arguments);\n    this._type = "airplay";\n  }\n  get _canPrompt() {\n    return "WebKitPlaybackTargetAvailabilityEvent" in window;\n  }\n}\n\n\n\n\n//# sourceURL=webpack://ProjectDB/./node_modules/vidstack/dev/chunks/vidstack-ChQ0-aqt.js?')},"./node_modules/vidstack/dev/chunks/vidstack-DJHyIwQd.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   R: () => (/* binding */ RAFLoop)\n/* harmony export */ });\n/* harmony import */ var _vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vidstack-mrj_B2Yo.js */ "./node_modules/vidstack/dev/chunks/vidstack-mrj_B2Yo.js");\n\n\nclass RAFLoop {\n  constructor(_callback) {\n    this._callback = _callback;\n  }\n  _start() {\n    if (!(0,_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.h)(this._id))\n      return;\n    this._loop();\n  }\n  _stop() {\n    if ((0,_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.j)(this._id))\n      window.cancelAnimationFrame(this._id);\n    this._id = void 0;\n  }\n  _loop() {\n    this._id = window.requestAnimationFrame(() => {\n      if ((0,_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.h)(this._id))\n        return;\n      this._callback();\n      this._loop();\n    });\n  }\n}\n\n\n\n\n//# sourceURL=webpack://ProjectDB/./node_modules/vidstack/dev/chunks/vidstack-DJHyIwQd.js?')},"./node_modules/vidstack/dev/providers/vidstack-html.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HTMLMediaProvider: () => (/* binding */ HTMLMediaProvider)\n/* harmony export */ });\n/* harmony import */ var _chunks_vidstack_CFPdVubu_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../chunks/vidstack-CFPdVubu.js */ "./node_modules/vidstack/dev/chunks/vidstack-CFPdVubu.js");\n/* harmony import */ var _chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chunks/vidstack-mrj_B2Yo.js */ "./node_modules/vidstack/dev/chunks/vidstack-mrj_B2Yo.js");\n/* harmony import */ var _chunks_vidstack_DJHyIwQd_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chunks/vidstack-DJHyIwQd.js */ "./node_modules/vidstack/dev/chunks/vidstack-DJHyIwQd.js");\n/* harmony import */ var _chunks_vidstack_ksPACRiU_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../chunks/vidstack-ksPACRiU.js */ "./node_modules/vidstack/dev/chunks/vidstack-ksPACRiU.js");\n/* harmony import */ var _chunks_vidstack_CnaYRoc3_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../chunks/vidstack-CnaYRoc3.js */ "./node_modules/vidstack/dev/chunks/vidstack-CnaYRoc3.js");\n\n\n\n\n\n\nlet audioContext = null, gainNodes = [], elAudioSources = [];\nfunction getOrCreateAudioCtx() {\n  return audioContext ??= new AudioContext();\n}\nfunction createGainNode() {\n  const audioCtx = getOrCreateAudioCtx(), gainNode = audioCtx.createGain();\n  gainNode.connect(audioCtx.destination);\n  gainNodes.push(gainNode);\n  return gainNode;\n}\nfunction createElementSource(el, gainNode) {\n  const audioCtx = getOrCreateAudioCtx(), src = audioCtx.createMediaElementSource(el);\n  if (gainNode) {\n    src.connect(gainNode);\n  }\n  elAudioSources.push(src);\n  return src;\n}\nfunction destroyGainNode(node) {\n  const idx = gainNodes.indexOf(node);\n  if (idx !== -1) {\n    gainNodes.splice(idx, 1);\n    node.disconnect();\n    freeAudioCtxWhenAllResourcesFreed();\n  }\n}\nfunction destroyElementSource(src) {\n  const idx = elAudioSources.indexOf(src);\n  if (idx !== -1) {\n    elAudioSources.splice(idx, 1);\n    src.disconnect();\n    freeAudioCtxWhenAllResourcesFreed();\n  }\n}\nfunction freeAudioCtxWhenAllResourcesFreed() {\n  if (audioContext && gainNodes.length === 0 && elAudioSources.length === 0) {\n    audioContext.close().then(() => {\n      audioContext = null;\n    });\n  }\n}\n\nclass AudioGain {\n  constructor(_media, _onChange) {\n    this._media = _media;\n    this._onChange = _onChange;\n    this._gainNode = null;\n    this._srcAudioNode = null;\n  }\n  get currentGain() {\n    return this._gainNode?.gain?.value ?? null;\n  }\n  get supported() {\n    return true;\n  }\n  setGain(gain) {\n    const currGain = this.currentGain;\n    if (gain === this.currentGain) {\n      return;\n    }\n    if (gain === 1 && currGain !== 1) {\n      this.removeGain();\n      return;\n    }\n    if (!this._gainNode) {\n      this._gainNode = createGainNode();\n      if (this._srcAudioNode) {\n        this._srcAudioNode.connect(this._gainNode);\n      }\n    }\n    if (!this._srcAudioNode) {\n      this._srcAudioNode = createElementSource(this._media, this._gainNode);\n    }\n    this._gainNode.gain.value = gain;\n    this._onChange(gain);\n  }\n  removeGain() {\n    if (!this._gainNode)\n      return;\n    if (this._srcAudioNode) {\n      this._srcAudioNode.connect(getOrCreateAudioCtx().destination);\n    }\n    this._destroyGainNode();\n    this._onChange(null);\n  }\n  destroy() {\n    this._destroySrcNode();\n    this._destroyGainNode();\n  }\n  _destroySrcNode() {\n    if (!this._srcAudioNode)\n      return;\n    try {\n      destroyElementSource(this._srcAudioNode);\n    } catch (e) {\n    } finally {\n      this._srcAudioNode = null;\n    }\n  }\n  _destroyGainNode() {\n    if (!this._gainNode)\n      return;\n    try {\n      destroyGainNode(this._gainNode);\n    } catch (e) {\n    } finally {\n      this._gainNode = null;\n    }\n  }\n}\n\nclass HTMLMediaEvents {\n  constructor(_provider, _ctx) {\n    this._provider = _provider;\n    this._ctx = _ctx;\n    this._disposal = (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.$)();\n    this._waiting = false;\n    this._attachedLoadStart = false;\n    this._attachedCanPlay = false;\n    this._timeRAF = new _chunks_vidstack_DJHyIwQd_js__WEBPACK_IMPORTED_MODULE_1__.R(this._onAnimationFrame.bind(this));\n    this._handlers = /* @__PURE__ */ new Map() ;\n    this._handleDevEvent = this._onDevEvent.bind(this) ;\n    this._attachInitialListeners();\n    (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.g)(this._attachTimeUpdate.bind(this));\n    (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.q)(this._onDispose.bind(this));\n  }\n  get _media() {\n    return this._provider.media;\n  }\n  get _notify() {\n    return this._ctx.delegate._notify;\n  }\n  _onDispose() {\n    this._attachedLoadStart = false;\n    this._attachedCanPlay = false;\n    this._timeRAF._stop();\n    this._disposal.empty();\n  }\n  /**\n   * The `timeupdate` event fires surprisingly infrequently during playback, meaning your progress\n   * bar (or whatever else is synced to the currentTime) moves in a choppy fashion. This helps\n   * resolve that by retrieving time updates in a request animation frame loop.\n   */\n  _onAnimationFrame() {\n    const newTime = this._media.currentTime;\n    if (this._ctx.$state.realCurrentTime() !== newTime)\n      this._updateCurrentTime(newTime);\n  }\n  _attachInitialListeners() {\n    {\n      this._ctx.logger?.info("attaching initial listeners");\n    }\n    this._attachEventListener("loadstart", this._onLoadStart);\n    this._attachEventListener("abort", this._onAbort);\n    this._attachEventListener("emptied", this._onEmptied);\n    this._attachEventListener("error", this._onError);\n    this._attachEventListener("volumechange", this._onVolumeChange);\n    this._ctx.logger?.debug("attached initial media event listeners");\n  }\n  _attachLoadStartListeners() {\n    if (this._attachedLoadStart)\n      return;\n    {\n      this._ctx.logger?.info("attaching load start listeners");\n    }\n    this._disposal.add(\n      this._attachEventListener("loadeddata", this._onLoadedData),\n      this._attachEventListener("loadedmetadata", this._onLoadedMetadata),\n      this._attachEventListener("canplay", this._onCanPlay),\n      this._attachEventListener("canplaythrough", this._onCanPlayThrough),\n      this._attachEventListener("durationchange", this._onDurationChange),\n      this._attachEventListener("play", this._onPlay),\n      this._attachEventListener("progress", this._onProgress),\n      this._attachEventListener("stalled", this._onStalled),\n      this._attachEventListener("suspend", this._onSuspend),\n      this._attachEventListener("ratechange", this._onRateChange)\n    );\n    this._attachedLoadStart = true;\n  }\n  _attachCanPlayListeners() {\n    if (this._attachedCanPlay)\n      return;\n    {\n      this._ctx.logger?.info("attaching can play listeners");\n    }\n    this._disposal.add(\n      this._attachEventListener("pause", this._onPause),\n      this._attachEventListener("playing", this._onPlaying),\n      this._attachEventListener("seeked", this._onSeeked),\n      this._attachEventListener("seeking", this._onSeeking),\n      this._attachEventListener("ended", this._onEnded),\n      this._attachEventListener("waiting", this._onWaiting)\n    );\n    this._attachedCanPlay = true;\n  }\n  _attachEventListener(eventType, handler) {\n    this._handlers.set(eventType, handler);\n    return (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.l)(\n      this._media,\n      eventType,\n      this._handleDevEvent \n    );\n  }\n  _onDevEvent(event2) {\n    this._ctx.logger?.debugGroup(`\\u{1F4FA} provider fired \\`${event2.type}\\``).labelledLog("Provider", this._provider).labelledLog("Event", event2).labelledLog("Media Store", { ...this._ctx.$state }).dispatch();\n    this._handlers.get(event2.type)?.call(this, event2);\n  }\n  _updateCurrentTime(time, trigger) {\n    const detail = {\n      // Avoid errors where `currentTime` can have higher precision.\n      currentTime: Math.min(time, this._ctx.$state.seekableEnd()),\n      played: this._media.played\n    };\n    this._notify("time-update", detail, trigger);\n  }\n  _onLoadStart(event2) {\n    if (this._media.networkState === 3) {\n      this._onAbort(event2);\n      return;\n    }\n    this._attachLoadStartListeners();\n    this._notify("load-start", void 0, event2);\n  }\n  _onAbort(event2) {\n    this._notify("abort", void 0, event2);\n  }\n  _onEmptied() {\n    this._notify("emptied", void 0, event);\n  }\n  _onLoadedData(event2) {\n    this._notify("loaded-data", void 0, event2);\n  }\n  _onLoadedMetadata(event2) {\n    this._attachCanPlayListeners();\n    this._notify("loaded-metadata", void 0, event2);\n    if (_chunks_vidstack_CFPdVubu_js__WEBPACK_IMPORTED_MODULE_2__.b || _chunks_vidstack_CFPdVubu_js__WEBPACK_IMPORTED_MODULE_2__.w && (0,_chunks_vidstack_CFPdVubu_js__WEBPACK_IMPORTED_MODULE_2__.p)(this._ctx.$state.source())) {\n      this._ctx.delegate._ready(this._getCanPlayDetail(), event2);\n    }\n  }\n  _getCanPlayDetail() {\n    return {\n      provider: (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.p)(this._ctx.$provider),\n      duration: this._media.duration,\n      buffered: this._media.buffered,\n      seekable: this._media.seekable\n    };\n  }\n  _onPlay(event2) {\n    if (!this._ctx.$state.canPlay)\n      return;\n    this._notify("play", void 0, event2);\n  }\n  _onPause(event2) {\n    if (this._media.readyState === 1 && !this._waiting)\n      return;\n    this._waiting = false;\n    this._timeRAF._stop();\n    this._notify("pause", void 0, event2);\n  }\n  _onCanPlay(event2) {\n    this._ctx.delegate._ready(this._getCanPlayDetail(), event2);\n  }\n  _onCanPlayThrough(event2) {\n    if (this._ctx.$state.started())\n      return;\n    this._notify("can-play-through", this._getCanPlayDetail(), event2);\n  }\n  _onPlaying(event2) {\n    this._waiting = false;\n    this._notify("playing", void 0, event2);\n    this._timeRAF._start();\n  }\n  _onStalled(event2) {\n    this._notify("stalled", void 0, event2);\n    if (this._media.readyState < 3) {\n      this._waiting = true;\n      this._notify("waiting", void 0, event2);\n    }\n  }\n  _onWaiting(event2) {\n    if (this._media.readyState < 3) {\n      this._waiting = true;\n      this._notify("waiting", void 0, event2);\n    }\n  }\n  _onEnded(event2) {\n    this._timeRAF._stop();\n    this._updateCurrentTime(this._media.duration, event2);\n    this._notify("end", void 0, event2);\n    if (this._ctx.$state.loop()) {\n      const hasCustomControls = (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.a0)(this._media.controls);\n      if (hasCustomControls)\n        this._media.controls = false;\n    }\n  }\n  _attachTimeUpdate() {\n    if (this._ctx.$state.paused()) {\n      (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.l)(this._media, "timeupdate", this._onTimeUpdate.bind(this));\n    }\n  }\n  _onTimeUpdate(event2) {\n    this._updateCurrentTime(this._media.currentTime, event2);\n  }\n  _onDurationChange(event2) {\n    if (this._ctx.$state.ended()) {\n      this._updateCurrentTime(this._media.duration, event2);\n    }\n    this._notify("duration-change", this._media.duration, event2);\n  }\n  _onVolumeChange(event2) {\n    const detail = {\n      volume: this._media.volume,\n      muted: this._media.muted\n    };\n    this._notify("volume-change", detail, event2);\n  }\n  _onSeeked(event2) {\n    this._updateCurrentTime(this._media.currentTime, event2);\n    this._notify("seeked", this._media.currentTime, event2);\n    if (Math.trunc(this._media.currentTime) === Math.trunc(this._media.duration) && (0,_chunks_vidstack_ksPACRiU_js__WEBPACK_IMPORTED_MODULE_3__.g)(this._media.duration) > (0,_chunks_vidstack_ksPACRiU_js__WEBPACK_IMPORTED_MODULE_3__.g)(this._media.currentTime)) {\n      this._updateCurrentTime(this._media.duration, event2);\n      if (!this._media.ended) {\n        this._ctx.player.dispatch(\n          new _chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.D("media-play-request", {\n            trigger: event2\n          })\n        );\n      }\n    }\n  }\n  _onSeeking(event2) {\n    this._notify("seeking", this._media.currentTime, event2);\n  }\n  _onProgress(event2) {\n    const detail = {\n      buffered: this._media.buffered,\n      seekable: this._media.seekable\n    };\n    this._notify("progress", detail, event2);\n  }\n  _onSuspend(event2) {\n    this._notify("suspend", void 0, event2);\n  }\n  _onRateChange(event2) {\n    this._notify("rate-change", this._media.playbackRate, event2);\n  }\n  _onError(event2) {\n    const error = this._media.error;\n    if (!error)\n      return;\n    const detail = {\n      message: error.message,\n      code: error.code,\n      mediaError: error\n    };\n    this._notify("error", detail, event2);\n  }\n}\n\nclass NativeAudioTracks {\n  constructor(_provider, _ctx) {\n    this._provider = _provider;\n    this._ctx = _ctx;\n    this._nativeTracks.onaddtrack = this._onAddNativeTrack.bind(this);\n    this._nativeTracks.onremovetrack = this._onRemoveNativeTrack.bind(this);\n    this._nativeTracks.onchange = this._onChangeNativeTrack.bind(this);\n    (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.l)(this._ctx.audioTracks, "change", this._onChangeTrack.bind(this));\n  }\n  get _nativeTracks() {\n    return this._provider.media.audioTracks;\n  }\n  _onAddNativeTrack(event) {\n    const _track = event.track;\n    if (_track.label === "")\n      return;\n    const id = _track.id.toString() || `native-audio-${this._ctx.audioTracks.length}`, audioTrack = {\n      id,\n      label: _track.label,\n      language: _track.language,\n      kind: _track.kind,\n      selected: false\n    };\n    this._ctx.audioTracks[_chunks_vidstack_CnaYRoc3_js__WEBPACK_IMPORTED_MODULE_4__.L._add](audioTrack, event);\n    if (_track.enabled)\n      audioTrack.selected = true;\n  }\n  _onRemoveNativeTrack(event) {\n    const track = this._ctx.audioTracks.getById(event.track.id);\n    if (track)\n      this._ctx.audioTracks[_chunks_vidstack_CnaYRoc3_js__WEBPACK_IMPORTED_MODULE_4__.L._remove](track, event);\n  }\n  _onChangeNativeTrack(event) {\n    let enabledTrack = this._getEnabledNativeTrack();\n    if (!enabledTrack)\n      return;\n    const track = this._ctx.audioTracks.getById(enabledTrack.id);\n    if (track)\n      this._ctx.audioTracks[_chunks_vidstack_CnaYRoc3_js__WEBPACK_IMPORTED_MODULE_4__.L._select](track, true, event);\n  }\n  _getEnabledNativeTrack() {\n    return Array.from(this._nativeTracks).find((track) => track.enabled);\n  }\n  _onChangeTrack(event) {\n    const { current } = event.detail;\n    if (!current)\n      return;\n    const track = this._nativeTracks.getTrackById(current.id);\n    if (track) {\n      const prev = this._getEnabledNativeTrack();\n      if (prev)\n        prev.enabled = false;\n      track.enabled = true;\n    }\n  }\n}\n\nclass HTMLMediaProvider {\n  constructor(_media, _ctx) {\n    this._media = _media;\n    this._ctx = _ctx;\n    this.scope = (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.r)();\n    this._currentSrc = null;\n    this.audioGain = new AudioGain(this._media, (gain) => {\n      this._ctx.delegate._notify("audio-gain-change", gain);\n    });\n  }\n  setup() {\n    new HTMLMediaEvents(this, this._ctx);\n    if ("audioTracks" in this.media)\n      new NativeAudioTracks(this, this._ctx);\n    (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.q)(() => {\n      this.audioGain.destroy();\n      this._media.srcObject = null;\n      this._media.removeAttribute("src");\n      for (const source of this._media.querySelectorAll("source"))\n        source.remove();\n      this._media.load();\n    });\n  }\n  get type() {\n    return "";\n  }\n  get media() {\n    return this._media;\n  }\n  get currentSrc() {\n    return this._currentSrc;\n  }\n  setPlaybackRate(rate) {\n    this._media.playbackRate = rate;\n  }\n  async play() {\n    return this._media.play();\n  }\n  async pause() {\n    return this._media.pause();\n  }\n  setMuted(muted) {\n    this._media.muted = muted;\n  }\n  setVolume(volume) {\n    this._media.volume = volume;\n  }\n  setCurrentTime(time) {\n    this._media.currentTime = time;\n  }\n  setPlaysInline(inline) {\n    (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.s)(this._media, "playsinline", inline);\n  }\n  async loadSource({ src, type }, preload) {\n    this._media.preload = preload || "";\n    if ((0,_chunks_vidstack_CFPdVubu_js__WEBPACK_IMPORTED_MODULE_2__.r)(src)) {\n      this._removeSource();\n      this._media.srcObject = src;\n    } else {\n      this._media.srcObject = null;\n      if ((0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.i)(src)) {\n        if (type !== "?") {\n          this._appendSource({ src, type });\n        } else {\n          this._removeSource();\n          this._media.src = this._appendMediaFragment(src);\n        }\n      } else {\n        this._removeSource();\n        this._media.src = window.URL.createObjectURL(src);\n      }\n    }\n    this._media.load();\n    this._currentSrc = { src, type };\n  }\n  /**\n   * Append source so it works when requesting AirPlay since hls.js will remove it.\n   */\n  _appendSource(src, defaultType) {\n    const prevSource = this._media.querySelector("source[data-vds]"), source = prevSource ?? document.createElement("source");\n    (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.s)(source, "src", this._appendMediaFragment(src.src));\n    (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.s)(source, "type", src.type !== "?" ? src.type : defaultType);\n    (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.s)(source, "data-vds", "");\n    if (!prevSource)\n      this._media.append(source);\n  }\n  _removeSource() {\n    this._media.querySelector("source[data-vds]")?.remove();\n  }\n  _appendMediaFragment(src) {\n    const { clipStartTime, clipEndTime } = this._ctx.$state, startTime = clipStartTime(), endTime = clipEndTime();\n    if (startTime > 0 && endTime > 0) {\n      return `${src}#t=${startTime},${endTime}`;\n    } else if (startTime > 0) {\n      return `${src}#t=${startTime}`;\n    } else if (endTime > 0) {\n      return `${src}#t=0,${endTime}`;\n    }\n    return src;\n  }\n}\n\n\n\n\n//# sourceURL=webpack://ProjectDB/./node_modules/vidstack/dev/providers/vidstack-html.js?')}}]);