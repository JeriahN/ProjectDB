/*! For license information please see vendors-node_modules_vidstack_dev_providers_vidstack-google-cast_js.main.js.LICENSE.txt */
"use strict";(self.webpackChunkProjectDB=self.webpackChunkProjectDB||[]).push([["vendors-node_modules_vidstack_dev_providers_vidstack-google-cast_js"],{"./node_modules/vidstack/dev/chunks/vidstack-DJHyIwQd.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   R: () => (/* binding */ RAFLoop)\n/* harmony export */ });\n/* harmony import */ var _vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vidstack-mrj_B2Yo.js */ "./node_modules/vidstack/dev/chunks/vidstack-mrj_B2Yo.js");\n\n\nclass RAFLoop {\n  constructor(_callback) {\n    this._callback = _callback;\n  }\n  _start() {\n    if (!(0,_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.h)(this._id))\n      return;\n    this._loop();\n  }\n  _stop() {\n    if ((0,_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.j)(this._id))\n      window.cancelAnimationFrame(this._id);\n    this._id = void 0;\n  }\n  _loop() {\n    this._id = window.requestAnimationFrame(() => {\n      if ((0,_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.h)(this._id))\n        return;\n      this._callback();\n      this._loop();\n    });\n  }\n}\n\n\n\n\n//# sourceURL=webpack://ProjectDB/./node_modules/vidstack/dev/chunks/vidstack-DJHyIwQd.js?')},"./node_modules/vidstack/dev/providers/vidstack-google-cast.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleCastProvider: () => (/* binding */ GoogleCastProvider)\n/* harmony export */ });\n/* harmony import */ var _chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chunks/vidstack-mrj_B2Yo.js */ "./node_modules/vidstack/dev/chunks/vidstack-mrj_B2Yo.js");\n/* harmony import */ var _chunks_vidstack_Bdqy3iGv_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../chunks/vidstack-Bdqy3iGv.js */ "./node_modules/vidstack/dev/chunks/vidstack-Bdqy3iGv.js");\n/* harmony import */ var _chunks_vidstack_DJHyIwQd_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../chunks/vidstack-DJHyIwQd.js */ "./node_modules/vidstack/dev/chunks/vidstack-DJHyIwQd.js");\n/* harmony import */ var _chunks_vidstack_CnaYRoc3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chunks/vidstack-CnaYRoc3.js */ "./node_modules/vidstack/dev/chunks/vidstack-CnaYRoc3.js");\n/* harmony import */ var _chunks_vidstack_BCHQ5iOd_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../chunks/vidstack-BCHQ5iOd.js */ "./node_modules/vidstack/dev/chunks/vidstack-BCHQ5iOd.js");\n\n\n\n\n\n\nclass GoogleCastMediaInfoBuilder {\n  constructor(src) {\n    this._info = new chrome.cast.media.MediaInfo(src.src, src.type);\n  }\n  build() {\n    return this._info;\n  }\n  _setStreamType(streamType) {\n    if (streamType.includes("live")) {\n      this._info.streamType = chrome.cast.media.StreamType.LIVE;\n    } else {\n      this._info.streamType = chrome.cast.media.StreamType.BUFFERED;\n    }\n    return this;\n  }\n  _setTracks(tracks) {\n    this._info.tracks = tracks.map(this._buildCastTrack);\n    return this;\n  }\n  _setMetadata(title, poster) {\n    this._info.metadata = new chrome.cast.media.GenericMediaMetadata();\n    this._info.metadata.title = title;\n    this._info.metadata.images = [{ url: poster }];\n    return this;\n  }\n  _buildCastTrack(track, trackId) {\n    const castTrack = new chrome.cast.media.Track(trackId, chrome.cast.media.TrackType.TEXT);\n    castTrack.name = track.label;\n    castTrack.trackContentId = track.src;\n    castTrack.trackContentType = "text/vtt";\n    castTrack.language = track.language;\n    castTrack.subtype = track.kind.toUpperCase();\n    return castTrack;\n  }\n}\n\nconst REMOTE_TRACK_TEXT_TYPE = chrome.cast.media.TrackType.TEXT, REMOTE_TRACK_AUDIO_TYPE = chrome.cast.media.TrackType.AUDIO;\nclass GoogleCastTracksManager {\n  constructor(_cast, _ctx, _onNewLocalTracks) {\n    this._cast = _cast;\n    this._ctx = _ctx;\n    this._onNewLocalTracks = _onNewLocalTracks;\n  }\n  _setup() {\n    const syncRemoteActiveIds = this._syncRemoteActiveIds.bind(this);\n    (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.l)(this._ctx.audioTracks, "change", syncRemoteActiveIds);\n    (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.l)(this._ctx.textTracks, "mode-change", syncRemoteActiveIds);\n    (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.g)(this._syncLocalTracks.bind(this));\n  }\n  _getLocalTextTracks() {\n    return this._ctx.$state.textTracks().filter((track) => track.src && track.type === "vtt");\n  }\n  _getLocalAudioTracks() {\n    return this._ctx.$state.audioTracks();\n  }\n  _getRemoteTracks(type) {\n    const tracks = this._cast.mediaInfo?.tracks ?? [];\n    return type ? tracks.filter((track) => track.type === type) : tracks;\n  }\n  _getRemoteActiveIds() {\n    const activeIds = [], activeLocalAudioTrack = this._getLocalAudioTracks().find((track) => track.selected), activeLocalTextTracks = this._getLocalTextTracks().filter(\n      (track) => track.mode === "showing"\n    );\n    if (activeLocalAudioTrack) {\n      const remoteAudioTracks = this._getRemoteTracks(REMOTE_TRACK_AUDIO_TYPE), remoteAudioTrack = this._findRemoteTrack(remoteAudioTracks, activeLocalAudioTrack);\n      if (remoteAudioTrack)\n        activeIds.push(remoteAudioTrack.trackId);\n    }\n    if (activeLocalTextTracks?.length) {\n      const remoteTextTracks = this._getRemoteTracks(REMOTE_TRACK_TEXT_TYPE);\n      if (remoteTextTracks.length) {\n        for (const localTrack of activeLocalTextTracks) {\n          const remoteTextTrack = this._findRemoteTrack(remoteTextTracks, localTrack);\n          if (remoteTextTrack)\n            activeIds.push(remoteTextTrack.trackId);\n        }\n      }\n    }\n    return activeIds;\n  }\n  _syncLocalTracks() {\n    const localTextTracks = this._getLocalTextTracks();\n    if (!this._cast.isMediaLoaded)\n      return;\n    const remoteTextTracks = this._getRemoteTracks(REMOTE_TRACK_TEXT_TYPE);\n    for (const localTrack of localTextTracks) {\n      const hasRemoteTrack = this._findRemoteTrack(remoteTextTracks, localTrack);\n      if (!hasRemoteTrack) {\n        (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.T)(() => this._onNewLocalTracks?.());\n        break;\n      }\n    }\n  }\n  _syncRemoteTracks(event) {\n    if (!this._cast.isMediaLoaded)\n      return;\n    const localAudioTracks = this._getLocalAudioTracks(), localTextTracks = this._getLocalTextTracks(), remoteAudioTracks = this._getRemoteTracks(REMOTE_TRACK_AUDIO_TYPE), remoteTextTracks = this._getRemoteTracks(REMOTE_TRACK_TEXT_TYPE);\n    for (const remoteAudioTrack of remoteAudioTracks) {\n      const hasLocalTrack = this._findLocalTrack(localAudioTracks, remoteAudioTrack);\n      if (hasLocalTrack)\n        continue;\n      const localAudioTrack = {\n        id: remoteAudioTrack.trackId.toString(),\n        label: remoteAudioTrack.name,\n        language: remoteAudioTrack.language,\n        kind: remoteAudioTrack.subtype ?? "main",\n        selected: false\n      };\n      this._ctx.audioTracks[_chunks_vidstack_CnaYRoc3_js__WEBPACK_IMPORTED_MODULE_1__.L._add](localAudioTrack, event);\n    }\n    for (const remoteTextTrack of remoteTextTracks) {\n      const hasLocalTrack = this._findLocalTrack(localTextTracks, remoteTextTrack);\n      if (hasLocalTrack)\n        continue;\n      const localTextTrack = {\n        id: remoteTextTrack.trackId.toString(),\n        src: remoteTextTrack.trackContentId,\n        label: remoteTextTrack.name,\n        language: remoteTextTrack.language,\n        kind: remoteTextTrack.subtype.toLowerCase()\n      };\n      this._ctx.textTracks.add(localTextTrack, event);\n    }\n  }\n  _syncRemoteActiveIds(event) {\n    if (!this._cast.isMediaLoaded)\n      return;\n    const activeIds = this._getRemoteActiveIds(), editRequest = new chrome.cast.media.EditTracksInfoRequest(activeIds);\n    this._editTracksInfo(editRequest).catch((error) => {\n      {\n        this._ctx.logger?.errorGroup("[vidstack] failed to edit cast tracks info").labelledLog("Edit Request", editRequest).labelledLog("Error", error).dispatch();\n      }\n    });\n  }\n  _editTracksInfo(request) {\n    const media = (0,_chunks_vidstack_BCHQ5iOd_js__WEBPACK_IMPORTED_MODULE_2__.f)();\n    return new Promise((resolve, reject) => media?.editTracksInfo(request, resolve, reject));\n  }\n  _findLocalTrack(localTracks, remoteTrack) {\n    return localTracks.find((localTrack) => this._isMatch(localTrack, remoteTrack));\n  }\n  _findRemoteTrack(remoteTracks, localTrack) {\n    return remoteTracks.find((remoteTrack) => this._isMatch(localTrack, remoteTrack));\n  }\n  // Note: we can\'t rely on id matching because they will differ between local/remote. A local\n  // track id might not even exist.\n  _isMatch(localTrack, remoteTrack) {\n    return remoteTrack.name === localTrack.label && remoteTrack.language === localTrack.language && remoteTrack.subtype.toLowerCase() === localTrack.kind.toLowerCase();\n  }\n}\n\nclass GoogleCastProvider {\n  constructor(_player, _ctx) {\n    this._player = _player;\n    this._ctx = _ctx;\n    this.$$PROVIDER_TYPE = "GOOGLE_CAST";\n    this.scope = (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.r)();\n    this._currentSrc = null;\n    this._state = "disconnected";\n    this._currentTime = 0;\n    this._played = 0;\n    this._playedRange = new _chunks_vidstack_Bdqy3iGv_js__WEBPACK_IMPORTED_MODULE_3__.T(0, 0);\n    this._seekableRange = new _chunks_vidstack_Bdqy3iGv_js__WEBPACK_IMPORTED_MODULE_3__.T(0, 0);\n    this._timeRAF = new _chunks_vidstack_DJHyIwQd_js__WEBPACK_IMPORTED_MODULE_4__.R(this._onAnimationFrame.bind(this));\n    this._reloadInfo = null;\n    this._isIdle = false;\n    this._tracks = new GoogleCastTracksManager(\n      this._player,\n      this._ctx,\n      this._onNewLocalTracks.bind(this)\n    );\n  }\n  get _notify() {\n    return this._ctx.delegate._notify;\n  }\n  get type() {\n    return "google-cast";\n  }\n  get currentSrc() {\n    return this._currentSrc;\n  }\n  /**\n   * The Google Cast remote player.\n   *\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.RemotePlayer}\n   */\n  get player() {\n    return this._player;\n  }\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */\n  get cast() {\n    return (0,_chunks_vidstack_BCHQ5iOd_js__WEBPACK_IMPORTED_MODULE_2__.g)();\n  }\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastSession}\n   */\n  get session() {\n    return (0,_chunks_vidstack_BCHQ5iOd_js__WEBPACK_IMPORTED_MODULE_2__.a)();\n  }\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/chrome.cast.media.Media}\n   */\n  get media() {\n    return (0,_chunks_vidstack_BCHQ5iOd_js__WEBPACK_IMPORTED_MODULE_2__.f)();\n  }\n  /**\n   * Whether the current Google Cast session belongs to this provider.\n   */\n  get hasActiveSession() {\n    return (0,_chunks_vidstack_BCHQ5iOd_js__WEBPACK_IMPORTED_MODULE_2__.j)(this._currentSrc);\n  }\n  setup() {\n    this._attachCastContextEventListeners();\n    this._attachCastPlayerEventListeners();\n    this._tracks._setup();\n    this._notify("provider-setup", this);\n  }\n  _attachCastContextEventListeners() {\n    (0,_chunks_vidstack_BCHQ5iOd_js__WEBPACK_IMPORTED_MODULE_2__.l)(\n      cast.framework.CastContextEventType.CAST_STATE_CHANGED,\n      this._onCastStateChange.bind(this)\n    );\n  }\n  _attachCastPlayerEventListeners() {\n    const Event2 = cast.framework.RemotePlayerEventType, handlers = {\n      [Event2.IS_CONNECTED_CHANGED]: this._onCastStateChange,\n      [Event2.IS_MEDIA_LOADED_CHANGED]: this._onMediaLoadedChange,\n      [Event2.CAN_CONTROL_VOLUME_CHANGED]: this._onCanControlVolumeChange,\n      [Event2.CAN_SEEK_CHANGED]: this._onCanSeekChange,\n      [Event2.DURATION_CHANGED]: this._onDurationChange,\n      [Event2.IS_MUTED_CHANGED]: this._onVolumeChange,\n      [Event2.VOLUME_LEVEL_CHANGED]: this._onVolumeChange,\n      [Event2.IS_PAUSED_CHANGED]: this._onPausedChange,\n      [Event2.LIVE_SEEKABLE_RANGE_CHANGED]: this._onProgress,\n      [Event2.PLAYER_STATE_CHANGED]: this._onPlayerStateChange\n    };\n    this._playerEventHandlers = handlers;\n    const handler = this._onRemotePlayerEvent.bind(this);\n    for (const type of (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.U)(handlers)) {\n      this._player.controller.addEventListener(type, handler);\n    }\n    (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.q)(() => {\n      for (const type of (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.U)(handlers)) {\n        this._player.controller.removeEventListener(type, handler);\n      }\n    });\n  }\n  async play() {\n    if (!this._player.isPaused && !this._isIdle)\n      return;\n    if (this._isIdle) {\n      await this._reload(false, 0);\n      return;\n    }\n    this._player.controller?.playOrPause();\n  }\n  async pause() {\n    if (this._player.isPaused)\n      return;\n    this._player.controller?.playOrPause();\n  }\n  getMediaStatus(request) {\n    return new Promise((resolve, reject) => {\n      this.media?.getStatus(request, resolve, reject);\n    });\n  }\n  setMuted(muted) {\n    const hasChanged = muted && !this._player.isMuted || !muted && this._player.isMuted;\n    if (hasChanged)\n      this._player.controller?.muteOrUnmute();\n  }\n  setCurrentTime(time) {\n    this._player.currentTime = time;\n    this._notify("seeking", time);\n    this._player.controller?.seek();\n  }\n  setVolume(volume) {\n    this._player.volumeLevel = volume;\n    this._player.controller?.setVolumeLevel();\n  }\n  async loadSource(src) {\n    if (this._reloadInfo?.src !== src)\n      this._reloadInfo = null;\n    if ((0,_chunks_vidstack_BCHQ5iOd_js__WEBPACK_IMPORTED_MODULE_2__.j)(src)) {\n      this._resumeSession();\n      this._currentSrc = src;\n      return;\n    }\n    this._notify("load-start");\n    const loadRequest = this._buildLoadRequest(src), errorCode = await this.session.loadMedia(loadRequest);\n    if (errorCode) {\n      this._currentSrc = null;\n      this._notify("error", Error((0,_chunks_vidstack_BCHQ5iOd_js__WEBPACK_IMPORTED_MODULE_2__.c)(errorCode)));\n      return;\n    }\n    this._currentSrc = src;\n  }\n  destroy() {\n    this._reset();\n    this._endSession();\n  }\n  _reset() {\n    if (!this._reloadInfo) {\n      this._played = 0;\n      this._playedRange = new _chunks_vidstack_Bdqy3iGv_js__WEBPACK_IMPORTED_MODULE_3__.T(0, 0);\n      this._seekableRange = new _chunks_vidstack_Bdqy3iGv_js__WEBPACK_IMPORTED_MODULE_3__.T(0, 0);\n    }\n    this._timeRAF._stop();\n    this._currentTime = 0;\n    this._reloadInfo = null;\n  }\n  _resumeSession() {\n    const resumeSessionEvent = new _chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.D("resume-session", { detail: this.session });\n    this._onMediaLoadedChange(resumeSessionEvent);\n    const { muted, volume, savedState } = this._ctx.$state, localState = savedState();\n    this.setCurrentTime(Math.max(this._player.currentTime, localState?.currentTime ?? 0));\n    this.setMuted(muted());\n    this.setVolume(volume());\n    if (localState?.paused === false)\n      this.play();\n  }\n  _endSession() {\n    this.cast.endCurrentSession(true);\n    const { remotePlaybackLoader } = this._ctx.$state;\n    remotePlaybackLoader.set(null);\n  }\n  _disconnectFromReceiver() {\n    const { savedState } = this._ctx.$state;\n    savedState.set({\n      paused: this._player.isPaused,\n      currentTime: this._player.currentTime\n    });\n    this._endSession();\n  }\n  _onAnimationFrame() {\n    this._onCurrentTimeChange();\n  }\n  _onRemotePlayerEvent(event) {\n    this._playerEventHandlers[event.type].call(this, event);\n  }\n  _onCastStateChange(data) {\n    const castState = this.cast.getCastState(), state = castState === cast.framework.CastState.CONNECTED ? "connected" : castState === cast.framework.CastState.CONNECTING ? "connecting" : "disconnected";\n    if (this._state === state)\n      return;\n    const detail = { type: "google-cast", state }, trigger = this._createEvent(data);\n    this._state = state;\n    this._notify("remote-playback-change", detail, trigger);\n    if (state === "disconnected") {\n      this._disconnectFromReceiver();\n    }\n  }\n  _onMediaLoadedChange(event) {\n    const hasLoaded = !!this._player.isMediaLoaded;\n    if (!hasLoaded)\n      return;\n    const src = (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.p)(this._ctx.$state.source);\n    Promise.resolve().then(() => {\n      if (src !== (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.p)(this._ctx.$state.source) || !this._player.isMediaLoaded)\n        return;\n      this._reset();\n      const duration = this._player.duration;\n      this._seekableRange = new _chunks_vidstack_Bdqy3iGv_js__WEBPACK_IMPORTED_MODULE_3__.T(0, duration);\n      const detail = {\n        provider: this,\n        duration,\n        buffered: this._playedRange,\n        seekable: this._getSeekableRange()\n      }, trigger = this._createEvent(event);\n      this._notify("loaded-metadata", void 0, trigger);\n      this._notify("loaded-data", void 0, trigger);\n      this._notify("can-play", detail, trigger);\n      this._onCanControlVolumeChange();\n      this._onCanSeekChange(event);\n      const { volume, muted } = this._ctx.$state;\n      this.setVolume(volume());\n      this.setMuted(muted());\n      this._timeRAF._start();\n      this._tracks._syncRemoteTracks(trigger);\n      this._tracks._syncRemoteActiveIds(trigger);\n    });\n  }\n  _onCanControlVolumeChange() {\n    this._ctx.$state.canSetVolume.set(this._player.canControlVolume);\n  }\n  _onCanSeekChange(event) {\n    const trigger = this._createEvent(event);\n    this._notify("stream-type-change", this._getStreamType(), trigger);\n  }\n  _getStreamType() {\n    const streamType = this._player.mediaInfo?.streamType;\n    return streamType === chrome.cast.media.StreamType.LIVE ? this._player.canSeek ? "live:dvr" : "live" : "on-demand";\n  }\n  _onCurrentTimeChange() {\n    if (this._reloadInfo)\n      return;\n    const currentTime = this._player.currentTime;\n    if (currentTime === this._currentTime)\n      return;\n    const prevPlayed = this._played, played = this._getPlayedRange(currentTime), detail = { currentTime, played };\n    this._notify("time-update", detail);\n    if (currentTime > prevPlayed)\n      this._onProgress();\n    if (this._ctx.$state.seeking()) {\n      this._notify("seeked", currentTime);\n    }\n    this._currentTime = currentTime;\n  }\n  _getPlayedRange(time) {\n    return this._played >= time ? this._playedRange : this._playedRange = new _chunks_vidstack_Bdqy3iGv_js__WEBPACK_IMPORTED_MODULE_3__.T(0, this._played = time);\n  }\n  _onDurationChange(event) {\n    if (!this._player.isMediaLoaded || this._reloadInfo)\n      return;\n    const duration = this._player.duration, trigger = this._createEvent(event);\n    this._seekableRange = new _chunks_vidstack_Bdqy3iGv_js__WEBPACK_IMPORTED_MODULE_3__.T(0, duration);\n    this._notify("duration-change", duration, trigger);\n  }\n  _onVolumeChange(event) {\n    if (!this._player.isMediaLoaded)\n      return;\n    const detail = {\n      muted: this._player.isMuted,\n      volume: this._player.volumeLevel\n    }, trigger = this._createEvent(event);\n    this._notify("volume-change", detail, trigger);\n  }\n  _onPausedChange(event) {\n    const trigger = this._createEvent(event);\n    if (this._player.isPaused) {\n      this._notify("pause", void 0, trigger);\n    } else {\n      this._notify("play", void 0, trigger);\n    }\n  }\n  _onProgress(event) {\n    const detail = {\n      seekable: this._getSeekableRange(),\n      buffered: this._playedRange\n    }, trigger = event ? this._createEvent(event) : void 0;\n    this._notify("progress", detail, trigger);\n  }\n  _onPlayerStateChange(event) {\n    const state = this._player.playerState, PlayerState = chrome.cast.media.PlayerState;\n    this._isIdle = state === PlayerState.IDLE;\n    if (state === PlayerState.PAUSED)\n      return;\n    const trigger = this._createEvent(event);\n    switch (state) {\n      case PlayerState.PLAYING:\n        this._notify("playing", void 0, trigger);\n        break;\n      case PlayerState.BUFFERING:\n        this._notify("waiting", void 0, trigger);\n        break;\n      case PlayerState.IDLE:\n        this._timeRAF._stop();\n        this._notify("pause");\n        this._notify("end");\n        break;\n    }\n  }\n  _getSeekableRange() {\n    return this._player.liveSeekableRange ? new _chunks_vidstack_Bdqy3iGv_js__WEBPACK_IMPORTED_MODULE_3__.T(this._player.liveSeekableRange.start, this._player.liveSeekableRange.end) : this._seekableRange;\n  }\n  _createEvent(detail) {\n    return detail instanceof Event ? detail : new _chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.D(detail.type, { detail });\n  }\n  _buildMediaInfo(src) {\n    const { streamType, title, poster } = this._ctx.$state;\n    return new GoogleCastMediaInfoBuilder(src)._setMetadata(title(), poster())._setStreamType(streamType())._setTracks(this._tracks._getLocalTextTracks()).build();\n  }\n  _buildLoadRequest(src) {\n    const mediaInfo = this._buildMediaInfo(src), request = new chrome.cast.media.LoadRequest(mediaInfo), savedState = this._ctx.$state.savedState();\n    request.autoplay = (this._reloadInfo?.paused ?? savedState?.paused) === false;\n    request.currentTime = this._reloadInfo?.time ?? savedState?.currentTime ?? 0;\n    return request;\n  }\n  async _reload(paused, time) {\n    const src = (0,_chunks_vidstack_mrj_B2Yo_js__WEBPACK_IMPORTED_MODULE_0__.p)(this._ctx.$state.source);\n    this._reloadInfo = { src, paused, time };\n    await this.loadSource(src);\n  }\n  _onNewLocalTracks() {\n    this._reload(this._player.isPaused, this._player.currentTime).catch((error) => {\n      {\n        this._ctx.logger?.errorGroup("[vidstack] cast failed to load new local tracks").labelledLog("Error", error).dispatch();\n      }\n    });\n  }\n}\n\n\n\n\n//# sourceURL=webpack://ProjectDB/./node_modules/vidstack/dev/providers/vidstack-google-cast.js?')}}]);